{
    "code": "import os\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nimport io\nimport base64\nimport json\nfrom io import StringIO\n\n# Define paths\noutput_dir = 'uploads/bc62cd63-4809-4c5a-8fe0-ec411114eeee'\nedges_path = os.path.join(output_dir, 'edges.csv')\ndata_csv_path = os.path.join(output_dir, 'data.csv')\nmetadata_path = os.path.join(output_dir, 'metadata.txt')\n\n# Create output directory if it doesn't exist\nos.makedirs(output_dir, exist_ok=True)\n\n# --- Metadata Collection ---\n# Read the edges.csv file\ndf = pd.read_csv(edges_path)\n\n# Save a copy of the dataframe as data.csv as specified\ndf.to_csv(data_csv_path, index=False)\n\n# Collect metadata\nmetadata_content = {}\nmetadata_content['file_name'] = 'edges.csv'\nmetadata_content['description'] = 'Undirected network edges data used for graph analysis.'\nmetadata_content['source_path'] = edges_path\nmetadata_content['saved_data_path'] = data_csv_path\n\n# Capture df.info() output\nbuffer_info = StringIO()\ndf.info(buf=buffer_info)\nmetadata_content['dataframe_info'] = buffer_info.getvalue()\n\nmetadata_content['dataframe_columns'] = df.columns.tolist()\nmetadata_content['dataframe_head'] = df.head().to_dict('records')\nmetadata_content['json_answer_format'] = {\n    \"edge_count\": \"number\",\n    \"highest_degree_node\": \"string\",\n    \"average_degree\": \"number\",\n    \"density\": \"number\",\n    \"shortest_path_alice_eve\": \"number\",\n    \"network_graph\": \"base64 PNG string under 100kB\",\n    \"degree_histogram\": \"base64 PNG string under 100kB\"\n}\n\n# Write metadata to metadata.txt\nwith open(metadata_path, 'w') as f:\n    json.dump(metadata_content, f, indent=2)\n\n# --- Network Analysis ---\n\n# Create graph\n# Assuming the first two columns are source and target nodes\nG = nx.from_pandas_edgelist(df, source=df.columns[0], target=df.columns[1])\n\n# Calculate metrics\nedge_count = G.number_of_edges()\nnum_nodes = G.number_of_nodes()\n\n# Highest degree node\ndegrees = dict(G.degree())\nhighest_degree_node = max(degrees, key=degrees.get) if degrees else None\n\n# Average degree\ntotal_degrees = sum(degrees.values())\naverage_degree = total_degrees / num_nodes if num_nodes > 0 else 0\n\n# Density\ndensity = nx.density(G)\n\n# Shortest path between Alice and Eve\nshortest_path_alice_eve = None\nif 'Alice' in G and 'Eve' in G:\n    try:\n        shortest_path_alice_eve = nx.shortest_path_length(G, source='Alice', target='Eve')\n    except nx.NetworkXNoPath:\n        shortest_path_alice_eve = None\n\n# Generate network graph PNG\nplt.figure(figsize=(8, 6))\npos = nx.spring_layout(G, k=0.15) # positions for all nodes\nnx.draw_networkx(G, pos, with_labels=True, node_color='skyblue', node_size=1000,\n                 font_size=9, font_weight='bold', edge_color='gray')\nplt.title(\"Network Graph\")\nplt.axis('off') # Hide axes\ngraph_buf = io.BytesIO()\nplt.savefig(graph_buf, format='png', bbox_inches='tight', dpi=100) # Save with reasonable DPI for size\nplt.close() # Close the plot to free memory\nnetwork_graph_base64 = base64.b64encode(graph_buf.getvalue()).decode('utf-8')\n\n# Generate degree histogram PNG\ndegree_sequence = [d for n, d in G.degree()]\ndegree_histogram_base64 = \"\"\nif degree_sequence:\n    plt.figure(figsize=(7, 5))\n    bins = range(min(degree_sequence), max(degree_sequence) + 2) if degree_sequence else [0, 1]\n    plt.hist(degree_sequence, bins=bins, align='left', rwidth=0.8, color='green')\n    plt.title(\"Degree Distribution\")\n    plt.xlabel(\"Degree\")\n    plt.ylabel(\"Number of Nodes\")\n    if degree_sequence:\n        plt.xticks(range(min(degree_sequence), max(degree_sequence) + 1))\n    degree_hist_buf = io.BytesIO()\n    plt.savefig(degree_hist_buf, format='png', bbox_inches='tight', dpi=100) # Save with reasonable DPI\n    plt.close() # Close the plot\n    degree_histogram_base64 = base64.b64encode(degree_hist_buf.getvalue()).decode('utf-8')\n\n# Prepare the final JSON output\nresult = {\n    \"edge_count\": edge_count,\n    \"highest_degree_node\": highest_degree_node,\n    \"average_degree\": average_degree,\n    \"density\": density,\n    \"shortest_path_alice_eve\": shortest_path_alice_eve,\n    \"network_graph\": network_graph_base64,\n    \"degree_histogram\": degree_histogram_base64\n}\n\n# Print the final result dictionary as a JSON string\nprint(json.dumps(result))\n",
    "libraries": [
        "pandas",
        "networkx",
        "matplotlib"
    ],
    "questions": [
        "How many edges are in the network?",
        "Which node has the highest degree?",
        "What is the average degree of the network?",
        "What is the network density?",
        "What is the length of the shortest path between Alice and Eve?",
        "Draw the network with nodes labelled and edges shown. Encode as base64 PNG.",
        "Plot the degree distribution as a bar chart with green bars. Encode as base64 PNG."
    ],
    "comment": "Step-3: Getting scrap code and metadata from llm. Tries count = %d 0"
}